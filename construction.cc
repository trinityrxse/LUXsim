#include "construction.hh"

MyDetectorConstruction::MyDetectorConstruction()
{   

    fMessenger = new G4GenericMessenger(this, "/detector/", "Detector Construction");


    DefineMaterial();

}

void MyDetectorConstruction::DefineMaterial()
{
    G4NistManager *nist = G4NistManager::Instance();

   /* G4Material* LXe = new G4Material("LXe", 54, 131.29 * g/mole,
                                      3.02 * g/cm3, kStateLiquid,
                                      173.15 * kelvin, 1.5 * atmosphere);

    std::vector<G4double> lxe_Energy   = { 7.0*eV , 7.07*eV, 7.14*eV };
    std::vector<G4double> lxe_SCINT = { 0.1, 1.0, 0.1 };
    std::vector<G4double> lxe_RIND  = { 1.59 , 1.57, 1.54 };
    std::vector<G4double> lxe_ABSL  = { 35.*cm, 35.*cm, 35.*cm}; //atten length

    G4MaterialPropertiesTable* fLXe_mt = new G4MaterialPropertiesTable();
    fLXe_mt->AddProperty("SCINTILLATIONCOMPONENT1", lxe_Energy, lxe_SCINT);
    fLXe_mt->AddProperty("SCINTILLATIONCOMPONENT2", lxe_Energy, lxe_SCINT);
    fLXe_mt->AddProperty("RINDEX", lxe_Energy, lxe_RIND);
    fLXe_mt->AddProperty("ABSLENGTH", lxe_Energy, lxe_ABSL);
    fLXe_mt->AddConstProperty("SCINTILLATIONYIELD", 12000./MeV);
    fLXe_mt->AddConstProperty("RESOLUTIONSCALE", 1.0);
    fLXe_mt->AddConstProperty("SCINTILLATIONTIMECONSTANT1", 20.*ns);
    fLXe_mt->AddConstProperty("SCINTILLATIONTIMECONSTANT2", 45.*ns);
    LXe->SetMaterialPropertiesTable(fLXe_mt);
    // Set the Birks Constant for the LXe scintillator
    LXe->GetIonisation()->SetBirksConstant(0.126*mm/MeV);   */
    
    
    G4Element* elementXe = new G4Element( "Xenon", "Xe", 54., 131.29*g/mole );
    G4Material* LXe = new G4Material
        ("LXe", 3.02*g/cm3, 1, kStateLiquid, 173.15*kelvin, 1.5*atmosphere );
    G4Material* GXe = new G4Material
        ("GXe", 0.005887*g/cm3, 1, kStateGas, 173.15*kelvin, 1.5*atmosphere );
    LXe->AddElement( elementXe, 1);
    GXe->AddElement( elementXe, 1);
    

    //  std::vector<G4double> LXe_PP    = { 7.07*eV, 7.07*eV };
    std::vector<G4double> LXe_PP    = { 7.0*eV , 7.07*eV, 7.14*eV };
    std::vector<G4double> LXe_SCINT = { 0.1, 1.0, 0.1 };
    std::vector<G4double> LXe_RIND  = { 1.59 , 1.57, 1.54 };
    std::vector<G4double> LXe_ABSL  = { 35.*m, 35.*m, 35.*m}; //atten length
    std::vector<G4double> LXe_scint_e_basic = { 0.*MeV, 10.*MeV };
    std::vector<G4double> LXe_scint_default = { 0., 120000.};
    std::vector<G4double> LXe_scint_alpha = { 0., 132000.};
    std::vector<G4double> LXe_scint_ion = { 0., 24000.};
    std::vector<G4double> LXe_scint_e = { 0.0*MeV, 0.01*MeV, 0.02*MeV, 0.03*MeV, 0.04*MeV, 0.05*MeV, 0.06*MeV, 0.07*MeV, 0.08*MeV, 0.09*MeV, 0.10*MeV, 0.11*MeV, 0.12*MeV, 0.13*MeV, 0.14*MeV, 0.15*MeV, 0.16*MeV, 0.17*MeV, 0.18*MeV, 0.19*MeV, 0.20*MeV, 0.21*MeV, 0.22*MeV, 0.23*MeV, 0.24*MeV, 0.25*MeV, 0.26*MeV, 0.27*MeV, 0.28*MeV, 0.29*MeV, 0.30*MeV, 0.31*MeV, 0.32*MeV, 0.33*MeV, 0.34*MeV, 0.35*MeV, 0.36*MeV, 0.37*MeV, 0.38*MeV, 0.39*MeV, 0.40*MeV, 0.41*MeV, 0.42*MeV, 0.43*MeV, 0.44*MeV, 0.45*MeV, 0.46*MeV, 0.47*MeV, 0.48*MeV, 0.49*MeV, 0.50*MeV, 0.51*MeV, 0.52*MeV, 0.53*MeV, 0.54*MeV, 0.55*MeV, 0.56*MeV, 0.57*MeV, 0.58*MeV, 0.59*MeV, 0.60*MeV, 0.61*MeV, 0.62*MeV, 0.63*MeV, 0.64*MeV, 0.65*MeV, 0.66*MeV, 0.67*MeV, 0.68*MeV, 0.69*MeV, 0.70*MeV, 0.71*MeV, 0.72*MeV, 0.73*MeV, 0.74*MeV, 0.75*MeV, 0.76*MeV, 0.77*MeV, 0.78*MeV, 0.79*MeV, 0.80*MeV, 0.81*MeV, 0.82*MeV, 0.83*MeV, 0.84*MeV, 0.85*MeV, 0.86*MeV, 0.87*MeV, 0.88*MeV, 0.89*MeV, 0.90*MeV, 0.91*MeV, 0.92*MeV, 0.93*MeV, 0.94*MeV, 0.95*MeV, 0.96*MeV, 0.97*MeV, 0.98*MeV, 0.99*MeV, 1.00*MeV, 1.01*MeV, 1.02*MeV, 1.03*MeV, 1.04*MeV, 1.05*MeV, 1.06*MeV, 1.07*MeV, 1.08*MeV, 1.09*MeV, 1.10*MeV, 1.11*MeV, 1.12*MeV, 1.13*MeV, 1.14*MeV, 1.15*MeV, 1.16*MeV, 1.17*MeV, 1.18*MeV, 1.19*MeV, 1.20*MeV, 1.21*MeV, 1.22*MeV, 1.23*MeV, 1.24*MeV, 1.25*MeV, 1.26*MeV, 1.27*MeV, 1.28*MeV, 1.29*MeV, 1.30*MeV, 1.31*MeV, 1.32*MeV, 1.33*MeV, 1.34*MeV, 1.35*MeV, 1.36*MeV, 1.37*MeV, 1.38*MeV, 1.39*MeV, 1.40*MeV, 1.41*MeV, 1.42*MeV, 1.43*MeV, 1.44*MeV, 1.45*MeV, 1.46*MeV, 1.47*MeV, 1.48*MeV, 1.49*MeV, 1.50*MeV, 1.51*MeV, 1.52*MeV, 1.53*MeV, 1.54*MeV, 1.55*MeV, 1.56*MeV, 1.57*MeV, 1.58*MeV, 1.59*MeV, 1.60*MeV, 1.61*MeV, 1.62*MeV, 1.63*MeV, 1.64*MeV, 1.65*MeV, 1.66*MeV, 1.67*MeV, 1.68*MeV, 1.69*MeV, 1.70*MeV, 1.71*MeV, 1.72*MeV, 1.73*MeV, 1.74*MeV, 1.75*MeV, 1.76*MeV, 1.77*MeV, 1.78*MeV, 1.79*MeV, 1.80*MeV, 1.81*MeV, 1.82*MeV, 1.83*MeV, 1.84*MeV, 1.85*MeV, 1.86*MeV, 1.87*MeV, 1.88*MeV, 1.89*MeV, 1.90*MeV, 1.91*MeV, 1.92*MeV, 1.93*MeV, 1.94*MeV, 1.95*MeV, 1.96*MeV, 1.97*MeV, 1.98*MeV, 1.99*MeV, 2.00*MeV, 2.01*MeV, 2.02*MeV, 2.03*MeV, 2.04*MeV, 2.05*MeV, 2.06*MeV, 2.07*MeV, 2.08*MeV, 2.09*MeV, 2.10*MeV, 2.11*MeV, 2.12*MeV, 2.13*MeV, 2.14*MeV, 2.15*MeV, 2.16*MeV, 2.17*MeV, 2.18*MeV, 2.19*MeV, 2.20*MeV, 2.21*MeV, 2.22*MeV, 2.23*MeV, 2.24*MeV, 2.25*MeV, 2.26*MeV, 2.27*MeV, 2.28*MeV, 2.29*MeV, 2.30*MeV, 2.31*MeV, 2.32*MeV, 2.33*MeV, 2.34*MeV, 2.35*MeV, 2.36*MeV, 2.37*MeV, 2.38*MeV, 2.39*MeV, 2.40*MeV, 2.41*MeV, 2.42*MeV, 2.43*MeV, 2.44*MeV, 2.45*MeV, 2.46*MeV, 2.47*MeV, 2.48*MeV, 2.49*MeV, 2.50*MeV, 2.51*MeV, 2.52*MeV, 2.53*MeV, 2.54*MeV, 2.55*MeV, 2.56*MeV, 2.57*MeV, 2.58*MeV, 2.59*MeV, 2.60*MeV, 2.61*MeV, 2.62*MeV, 2.63*MeV, 2.64*MeV, 2.65*MeV, 2.66*MeV, 2.67*MeV, 2.68*MeV, 2.69*MeV, 2.70*MeV, 2.71*MeV, 2.72*MeV, 2.73*MeV, 2.74*MeV, 2.75*MeV, 2.76*MeV, 2.77*MeV, 2.78*MeV, 2.79*MeV, 2.80*MeV, 2.81*MeV, 2.82*MeV, 2.83*MeV, 2.84*MeV, 2.85*MeV, 2.86*MeV, 2.87*MeV, 2.88*MeV, 2.89*MeV, 2.90*MeV, 2.91*MeV, 2.92*MeV, 2.93*MeV, 2.94*MeV, 2.95*MeV, 2.96*MeV, 2.97*MeV, 2.98*MeV, 2.99*MeV, 3.00*MeV, 3.01*MeV, 3.02*MeV, 3.03*MeV, 3.04*MeV, 3.05*MeV, 3.06*MeV, 3.07*MeV, 3.08*MeV, 3.09*MeV, 3.10*MeV, 3.11*MeV, 3.12*MeV, 3.13*MeV, 3.14*MeV, 3.15*MeV, 3.16*MeV, 3.17*MeV, 3.18*MeV, 3.19*MeV, 3.20*MeV, 3.21*MeV, 3.22*MeV, 3.23*MeV, 3.24*MeV, 3.25*MeV, 3.26*MeV, 3.27*MeV, 3.28*MeV, 3.29*MeV, 3.30*MeV, 3.31*MeV, 3.32*MeV, 3.33*MeV, 3.34*MeV, 3.35*MeV, 3.36*MeV, 3.37*MeV, 3.38*MeV, 3.39*MeV, 3.40*MeV, 3.41*MeV, 3.42*MeV, 3.43*MeV, 3.44*MeV, 3.45*MeV, 3.46*MeV, 3.47*MeV, 3.48*MeV, 3.49*MeV, 3.50*MeV, 3.51*MeV, 3.52*MeV, 3.53*MeV, 3.54*MeV, 3.55*MeV, 3.56*MeV, 3.57*MeV, 3.58*MeV, 3.59*MeV, 3.60*MeV, 3.61*MeV, 3.62*MeV, 3.63*MeV, 3.64*MeV, 3.65*MeV, 3.66*MeV, 3.67*MeV, 3.68*MeV, 3.69*MeV, 3.70*MeV, 3.71*MeV, 3.72*MeV, 3.73*MeV, 3.74*MeV, 3.75*MeV, 3.76*MeV, 3.77*MeV, 3.78*MeV, 3.79*MeV, 3.80*MeV, 3.81*MeV, 3.82*MeV, 3.83*MeV, 3.84*MeV, 3.85*MeV, 3.86*MeV, 3.87*MeV, 3.88*MeV, 3.89*MeV, 3.90*MeV, 3.91*MeV, 3.92*MeV, 3.93*MeV, 3.94*MeV, 3.95*MeV, 3.96*MeV, 3.97*MeV, 3.98*MeV, 3.99*MeV, 4.00*MeV, 4.01*MeV, 4.02*MeV, 4.03*MeV, 4.04*MeV, 4.05*MeV, 4.06*MeV, 4.07*MeV, 4.08*MeV, 4.09*MeV, 4.10*MeV, 4.11*MeV, 4.12*MeV, 4.13*MeV, 4.14*MeV, 4.15*MeV, 4.16*MeV, 4.17*MeV, 4.18*MeV, 4.19*MeV, 4.20*MeV, 4.21*MeV, 4.22*MeV, 4.23*MeV, 4.24*MeV, 4.25*MeV, 4.26*MeV, 4.27*MeV, 4.28*MeV, 4.29*MeV, 4.30*MeV, 4.31*MeV, 4.32*MeV, 4.33*MeV, 4.34*MeV, 4.35*MeV, 4.36*MeV, 4.37*MeV, 4.38*MeV, 4.39*MeV, 4.40*MeV, 4.41*MeV, 4.42*MeV, 4.43*MeV, 4.44*MeV, 4.45*MeV, 4.46*MeV, 4.47*MeV, 4.48*MeV, 4.49*MeV, 4.50*MeV, 4.51*MeV, 4.52*MeV, 4.53*MeV, 4.54*MeV, 4.55*MeV, 4.56*MeV, 4.57*MeV, 4.58*MeV, 4.59*MeV, 4.60*MeV, 4.61*MeV, 4.62*MeV, 4.63*MeV, 4.64*MeV, 4.65*MeV, 4.66*MeV, 4.67*MeV, 4.68*MeV, 4.69*MeV, 4.70*MeV, 4.71*MeV, 4.72*MeV, 4.73*MeV, 4.74*MeV, 4.75*MeV, 4.76*MeV, 4.77*MeV, 4.78*MeV, 4.79*MeV, 4.80*MeV, 4.81*MeV, 4.82*MeV, 4.83*MeV, 4.84*MeV, 4.85*MeV, 4.86*MeV, 4.87*MeV, 4.88*MeV, 4.89*MeV, 4.90*MeV, 4.91*MeV, 4.92*MeV, 4.93*MeV, 4.94*MeV, 4.95*MeV, 4.96*MeV, 4.97*MeV, 4.98*MeV, 4.99*MeV, 5.00*MeV, 5.01*MeV, 5.02*MeV, 5.03*MeV, 5.04*MeV, 5.05*MeV, 5.06*MeV, 5.07*MeV, 5.08*MeV, 5.09*MeV, 5.10*MeV, 5.11*MeV, 5.12*MeV, 5.13*MeV, 5.14*MeV, 5.15*MeV, 5.16*MeV, 5.17*MeV, 5.18*MeV, 5.19*MeV, 5.20*MeV, 5.21*MeV, 5.22*MeV, 5.23*MeV, 5.24*MeV, 5.25*MeV, 5.26*MeV, 5.27*MeV, 5.28*MeV, 5.29*MeV, 5.30*MeV, 5.31*MeV, 5.32*MeV, 5.33*MeV, 5.34*MeV, 5.35*MeV, 5.36*MeV, 5.37*MeV, 5.38*MeV, 5.39*MeV, 5.40*MeV, 5.41*MeV, 5.42*MeV, 5.43*MeV, 5.44*MeV, 5.45*MeV, 5.46*MeV, 5.47*MeV, 5.48*MeV, 5.49*MeV, 5.50*MeV, 5.51*MeV, 5.52*MeV, 5.53*MeV, 5.54*MeV, 5.55*MeV, 5.56*MeV, 5.57*MeV, 5.58*MeV, 5.59*MeV, 5.60*MeV, 5.61*MeV, 5.62*MeV, 5.63*MeV, 5.64*MeV, 5.65*MeV, 5.66*MeV, 5.67*MeV, 5.68*MeV, 5.69*MeV, 5.70*MeV, 5.71*MeV, 5.72*MeV, 5.73*MeV, 5.74*MeV, 5.75*MeV, 5.76*MeV, 5.77*MeV, 5.78*MeV, 5.79*MeV, 5.80*MeV, 5.81*MeV, 5.82*MeV, 5.83*MeV, 5.84*MeV, 5.85*MeV, 5.86*MeV, 5.87*MeV, 5.88*MeV, 5.89*MeV, 5.90*MeV, 5.91*MeV, 5.92*MeV, 5.93*MeV, 5.94*MeV, 5.95*MeV, 5.96*MeV, 5.97*MeV, 5.98*MeV, 5.99*MeV, 6.00*MeV, 6.01*MeV, 6.02*MeV, 6.03*MeV, 6.04*MeV, 6.05*MeV, 6.06*MeV, 6.07*MeV, 6.08*MeV, 6.09*MeV, 6.10*MeV, 6.11*MeV, 6.12*MeV, 6.13*MeV, 6.14*MeV, 6.15*MeV, 6.16*MeV, 6.17*MeV, 6.18*MeV, 6.19*MeV, 6.20*MeV, 6.21*MeV, 6.22*MeV, 6.23*MeV, 6.24*MeV, 6.25*MeV, 6.26*MeV, 6.27*MeV, 6.28*MeV, 6.29*MeV, 6.30*MeV, 6.31*MeV, 6.32*MeV, 6.33*MeV, 6.34*MeV, 6.35*MeV, 6.36*MeV, 6.37*MeV, 6.38*MeV, 6.39*MeV, 6.40*MeV, 6.41*MeV, 6.42*MeV, 6.43*MeV, 6.44*MeV, 6.45*MeV, 6.46*MeV, 6.47*MeV, 6.48*MeV, 6.49*MeV, 6.50*MeV, 6.51*MeV, 6.52*MeV, 6.53*MeV, 6.54*MeV, 6.55*MeV, 6.56*MeV, 6.57*MeV, 6.58*MeV, 6.59*MeV, 6.60*MeV, 6.61*MeV, 6.62*MeV, 6.63*MeV, 6.64*MeV, 6.65*MeV, 6.66*MeV, 6.67*MeV, 6.68*MeV, 6.69*MeV, 6.70*MeV, 6.71*MeV, 6.72*MeV, 6.73*MeV, 6.74*MeV, 6.75*MeV, 6.76*MeV, 6.77*MeV, 6.78*MeV, 6.79*MeV, 6.80*MeV, 6.81*MeV, 6.82*MeV, 6.83*MeV, 6.84*MeV, 6.85*MeV, 6.86*MeV, 6.87*MeV, 6.88*MeV, 6.89*MeV, 6.90*MeV, 6.91*MeV, 6.92*MeV, 6.93*MeV, 6.94*MeV, 6.95*MeV, 6.96*MeV, 6.97*MeV, 6.98*MeV, 6.99*MeV, 7.00*MeV, 7.01*MeV, 7.02*MeV, 7.03*MeV, 7.04*MeV, 7.05*MeV, 7.06*MeV, 7.07*MeV, 7.08*MeV, 7.09*MeV, 7.10*MeV, 7.11*MeV, 7.12*MeV, 7.13*MeV, 7.14*MeV, 7.15*MeV, 7.16*MeV, 7.17*MeV, 7.18*MeV, 7.19*MeV, 7.20*MeV, 7.21*MeV, 7.22*MeV, 7.23*MeV, 7.24*MeV, 7.25*MeV, 7.26*MeV, 7.27*MeV, 7.28*MeV, 7.29*MeV, 7.30*MeV, 7.31*MeV, 7.32*MeV, 7.33*MeV, 7.34*MeV, 7.35*MeV, 7.36*MeV, 7.37*MeV, 7.38*MeV, 7.39*MeV, 7.40*MeV, 7.41*MeV, 7.42*MeV, 7.43*MeV, 7.44*MeV, 7.45*MeV, 7.46*MeV, 7.47*MeV, 7.48*MeV, 7.49*MeV, 7.50*MeV, 7.51*MeV, 7.52*MeV, 7.53*MeV, 7.54*MeV, 7.55*MeV, 7.56*MeV, 7.57*MeV, 7.58*MeV, 7.59*MeV, 7.60*MeV, 7.61*MeV, 7.62*MeV, 7.63*MeV, 7.64*MeV, 7.65*MeV, 7.66*MeV, 7.67*MeV, 7.68*MeV, 7.69*MeV, 7.70*MeV, 7.71*MeV, 7.72*MeV, 7.73*MeV, 7.74*MeV, 7.75*MeV, 7.76*MeV, 7.77*MeV, 7.78*MeV, 7.79*MeV, 7.80*MeV, 7.81*MeV, 7.82*MeV, 7.83*MeV, 7.84*MeV, 7.85*MeV, 7.86*MeV, 7.87*MeV, 7.88*MeV, 7.89*MeV, 7.90*MeV, 7.91*MeV, 7.92*MeV, 7.93*MeV, 7.94*MeV, 7.95*MeV, 7.96*MeV, 7.97*MeV, 7.98*MeV, 7.99*MeV, 8.00*MeV, 8.01*MeV, 8.02*MeV, 8.03*MeV, 8.04*MeV, 8.05*MeV, 8.06*MeV, 8.07*MeV, 8.08*MeV, 8.09*MeV, 8.10*MeV, 8.11*MeV, 8.12*MeV, 8.13*MeV, 8.14*MeV, 8.15*MeV, 8.16*MeV, 8.17*MeV, 8.18*MeV, 8.19*MeV, 8.20*MeV, 8.21*MeV, 8.22*MeV, 8.23*MeV, 8.24*MeV, 8.25*MeV, 8.26*MeV, 8.27*MeV, 8.28*MeV, 8.29*MeV, 8.30*MeV, 8.31*MeV, 8.32*MeV, 8.33*MeV, 8.34*MeV, 8.35*MeV, 8.36*MeV, 8.37*MeV, 8.38*MeV, 8.39*MeV, 8.40*MeV, 8.41*MeV, 8.42*MeV, 8.43*MeV, 8.44*MeV, 8.45*MeV, 8.46*MeV, 8.47*MeV, 8.48*MeV, 8.49*MeV, 8.50*MeV, 8.51*MeV, 8.52*MeV, 8.53*MeV, 8.54*MeV, 8.55*MeV, 8.56*MeV, 8.57*MeV, 8.58*MeV, 8.59*MeV, 8.60*MeV, 8.61*MeV, 8.62*MeV, 8.63*MeV, 8.64*MeV, 8.65*MeV, 8.66*MeV, 8.67*MeV, 8.68*MeV, 8.69*MeV, 8.70*MeV, 8.71*MeV, 8.72*MeV, 8.73*MeV, 8.74*MeV, 8.75*MeV, 8.76*MeV, 8.77*MeV, 8.78*MeV, 8.79*MeV, 8.80*MeV, 8.81*MeV, 8.82*MeV, 8.83*MeV, 8.84*MeV, 8.85*MeV, 8.86*MeV, 8.87*MeV, 8.88*MeV, 8.89*MeV, 8.90*MeV, 8.91*MeV, 8.92*MeV, 8.93*MeV, 8.94*MeV, 8.95*MeV, 8.96*MeV, 8.97*MeV, 8.98*MeV, 8.99*MeV, 9.00*MeV, 9.01*MeV, 9.02*MeV, 9.03*MeV, 9.04*MeV, 9.05*MeV, 9.06*MeV, 9.07*MeV, 9.08*MeV, 9.09*MeV, 9.10*MeV, 9.11*MeV, 9.12*MeV, 9.13*MeV, 9.14*MeV, 9.15*MeV, 9.16*MeV, 9.17*MeV, 9.18*MeV, 9.19*MeV, 9.20*MeV, 9.21*MeV, 9.22*MeV, 9.23*MeV, 9.24*MeV, 9.25*MeV, 9.26*MeV, 9.27*MeV, 9.28*MeV, 9.29*MeV, 9.30*MeV, 9.31*MeV, 9.32*MeV, 9.33*MeV, 9.34*MeV, 9.35*MeV, 9.36*MeV, 9.37*MeV, 9.38*MeV, 9.39*MeV, 9.40*MeV, 9.41*MeV, 9.42*MeV, 9.43*MeV, 9.44*MeV, 9.45*MeV, 9.46*MeV, 9.47*MeV, 9.48*MeV, 9.49*MeV, 9.50*MeV, 9.51*MeV, 9.52*MeV, 9.53*MeV, 9.54*MeV, 9.55*MeV, 9.56*MeV, 9.57*MeV, 9.58*MeV, 9.59*MeV, 9.60*MeV, 9.61*MeV, 9.62*MeV, 9.63*MeV, 9.64*MeV, 9.65*MeV, 9.66*MeV, 9.67*MeV, 9.68*MeV, 9.69*MeV, 9.70*MeV, 9.71*MeV, 9.72*MeV, 9.73*MeV, 9.74*MeV, 9.75*MeV, 9.76*MeV, 9.77*MeV, 9.78*MeV, 9.79*MeV, 9.80*MeV, 9.81*MeV, 9.82*MeV, 9.83*MeV, 9.84*MeV, 9.85*MeV, 9.86*MeV, 9.87*MeV, 9.88*MeV, 9.89*MeV, 9.90*MeV, 9.91*MeV, 9.92*MeV, 9.93*MeV, 9.94*MeV, 9.95*MeV, 9.96*MeV, 9.97*MeV, 9.98*MeV, 9.99*MeV, 10.00*MeV };
    std::vector<G4double> LXe_photon_yield = { 0.0, 531.3, 1091.8, 1641.1, 2182.1, 2714.0, 3235.6, 3745.9, 4243.9, 4729.2, 5201.4, 5660.6, 6106.9, 6540.8, 6962.7, 7373.4, 7773.7, 8164.1, 8545.7, 8919.1, 9285.2, 9644.6, 9998.2, 10346.6, 10690.3, 11030.0, 11366.1, 11699.2, 12029.6, 12357.8, 12684.0, 13008.6, 13331.9, 13654.0, 13975.3, 14295.8, 14615.7, 14935.2, 15254.4, 15573.5, 15892.4, 16211.3, 16530.3, 16849.3, 17168.6, 17488.0, 17807.7, 18127.7, 18447.9, 18768.5, 19089.4, 19410.7, 19732.3, 20054.3, 20376.7, 20699.5, 21022.6, 21346.1, 21670.0, 21994.3, 22319.0, 22644.1, 22969.5, 23295.3, 23621.4, 23947.9, 24274.8, 24602.0, 24929.5, 25257.4, 25585.6, 25914.1, 26243.0, 26572.1, 26901.6, 27231.3, 27561.3, 27891.6, 28222.2, 28553.1, 28884.2, 29215.6, 29547.2, 29879.1, 30211.2, 30543.5, 30876.1, 31208.9, 31541.9, 31875.1, 32208.5, 32542.2, 32876.0, 33210.0, 33544.2, 33878.6, 34213.2, 34548.0, 34882.9, 35218.0, 35553.3, 35888.7, 36224.3, 36560.0, 36895.9, 37231.9, 37568.1, 37904.4, 38240.8, 38577.4, 38914.1, 39251.0, 39587.9, 39925.0, 40262.2, 40599.6, 40937.0, 41274.6, 41612.2, 41950.0, 42287.9, 42625.8, 42963.9, 43302.1, 43640.4, 43978.8, 44317.2, 44655.8, 44994.4, 45333.2, 45672.0, 46010.9, 46349.9, 46688.9, 47028.1, 47367.3, 47706.6, 48046.0, 48385.4, 48724.9, 49064.5, 49404.2, 49743.9, 50083.7, 50423.5, 50763.5, 51103.4, 51443.5, 51783.6, 52123.8, 52464.0, 52804.3, 53144.6, 53485.0, 53825.4, 54165.9, 54506.5, 54847.1, 55187.8, 55528.5, 55869.2, 56210.0, 56550.9, 56891.8, 57232.7, 57573.7, 57914.7, 58255.8, 58596.9, 58938.1, 59279.3, 59620.5, 59961.8, 60303.2, 60644.5, 60985.9, 61327.4, 61668.8, 62010.3, 62351.9, 62693.5, 63035.1, 63376.7, 63718.4, 64060.1, 64401.9, 64743.7, 65085.5, 65427.3, 65769.2, 66111.1, 66453.1, 66795.0, 67137.0, 67479.0, 67821.1, 68163.2, 68505.3, 68847.4, 69189.6, 69531.8, 69874.0, 70216.2, 70558.5, 70900.8, 71243.1, 71585.4, 71927.8, 72270.2, 72612.6, 72955.0, 73297.4, 73639.9, 73982.4, 74324.9, 74667.5, 75010.0, 75352.6, 75695.2, 76037.8, 76380.5, 76723.1, 77065.8, 77408.5, 77751.2, 78094.0, 78436.7, 78779.5, 79122.3, 79465.1, 79807.9, 80150.8, 80493.7, 80836.5, 81179.4, 81522.3, 81865.3, 82208.2, 82551.2, 82894.2, 83237.1, 83580.1, 83923.2, 84266.2, 84609.3, 84952.3, 85295.4, 85638.5, 85981.6, 86324.7, 86667.9, 87011.0, 87354.2, 87697.4, 88040.6, 88383.8, 88727.0, 89070.2, 89413.5, 89756.7, 90100.0, 90443.3, 90786.5, 91129.8, 91473.2, 91816.5, 92159.8, 92503.2, 92846.5, 93189.9, 93533.3, 93876.7, 94220.1, 94563.5, 94906.9, 95250.4, 95593.8, 95937.3, 96280.7, 96624.2, 96967.7, 97311.2, 97654.7, 97998.2, 98341.7, 98685.3, 99028.8, 99372.4, 99715.9, 100059.5, 100403.1, 100746.7, 101090.3, 101433.9, 101777.5, 102121.1, 102464.7, 102808.4, 103152.0, 103495.7, 103839.4, 104183.0, 104526.7, 104870.4, 105214.1, 105557.8, 105901.5, 106245.2, 106589.0, 106932.7, 107276.4, 107620.2, 107963.9, 108307.7, 108651.5, 108995.3, 109339.0, 109682.8, 110026.6, 110370.4, 110714.2, 111058.1, 111401.9, 111745.7, 112089.6, 112433.4, 112777.2, 113121.1, 113465.0, 113808.8, 114152.7, 114496.6, 114840.5, 115184.4, 115528.3, 115872.2, 116216.1, 116560.0, 116903.9, 117247.9, 117591.8, 117935.7, 118279.7, 118623.6, 118967.6, 119311.5, 119655.5, 119999.5, 120343.4, 120687.4, 121031.4, 121375.4, 121719.4, 122063.4, 122407.4, 122751.4, 123095.4, 123439.5, 123783.5, 124127.5, 124471.6, 124815.6, 125159.6, 125503.7, 125847.7, 126191.8, 126535.9, 126879.9, 127224.0, 127568.1, 127912.2, 128256.3, 128600.3, 128944.4, 129288.5, 129632.6, 129976.7, 130320.9, 130665.0, 131009.1, 131353.2, 131697.3, 132041.5, 132385.6, 132729.7, 133073.9, 133418.0, 133762.2, 134106.3, 134450.5, 134794.6, 135138.8, 135483.0, 135827.2, 136171.3, 136515.5, 136859.7, 137203.9, 137548.1, 137892.3, 138236.5, 138580.7, 138924.9, 139269.1, 139613.3, 139957.5, 140301.7, 140645.9, 140990.2, 141334.4, 141678.6, 142022.9, 142367.1, 142711.3, 143055.6, 143399.8, 143744.1, 144088.3, 144432.6, 144776.8, 145121.1, 145465.4, 145809.6, 146153.9, 146498.2, 146842.4, 147186.7, 147531.0, 147875.3, 148219.6, 148563.9, 148908.2, 149252.5, 149596.8, 149941.1, 150285.4, 150629.7, 150974.0, 151318.3, 151662.6, 152006.9, 152351.2, 152695.6, 153039.9, 153384.2, 153728.5, 154072.9, 154417.2, 154761.5, 155105.9, 155450.2, 155794.6, 156138.9, 156483.3, 156827.6, 157172.0, 157516.3, 157860.7, 158205.0, 158549.4, 158893.8, 159238.1, 159582.5, 159926.9, 160271.3, 160615.6, 160960.0, 161304.4, 161648.8, 161993.2, 162337.6, 162681.9, 163026.3, 163370.7, 163715.1, 164059.5, 164403.9, 164748.3, 165092.7, 165437.1, 165781.5, 166126.0, 166470.4, 166814.8, 167159.2, 167503.6, 167848.0, 168192.5, 168536.9, 168881.3, 169225.7, 169570.2, 169914.6, 170259.0, 170603.5, 170947.9, 171292.3, 171636.8, 171981.2, 172325.7, 172670.1, 173014.6, 173359.0, 173703.5, 174047.9, 174392.4, 174736.8, 175081.3, 175425.7, 175770.2, 176114.7, 176459.1, 176803.6, 177148.1, 177492.5, 177837.0, 178181.5, 178526.0, 178870.4, 179214.9, 179559.4, 179903.9, 180248.4, 180592.8, 180937.3, 181281.8, 181626.3, 181970.8, 182315.3, 182659.8, 183004.3, 183348.8, 183693.3, 184037.8, 184382.3, 184726.8, 185071.3, 185415.8, 185760.3, 186104.8, 186449.3, 186793.8, 187138.3, 187482.8, 187827.4, 188171.9, 188516.4, 188860.9, 189205.4, 189550.0, 189894.5, 190239.0, 190583.5, 190928.1, 191272.6, 191617.1, 191961.6, 192306.2, 192650.7, 192995.2, 193339.8, 193684.3, 194028.9, 194373.4, 194717.9, 195062.5, 195407.0, 195751.6, 196096.1, 196440.7, 196785.2, 197129.8, 197474.3, 197818.9, 198163.4, 198508.0, 198852.5, 199197.1, 199541.6, 199886.2, 200230.8, 200575.3, 200919.9, 201264.5, 201609.0, 201953.6, 202298.2, 202642.7, 202987.3, 203331.9, 203676.4, 204021.0, 204365.6, 204710.2, 205054.7, 205399.3, 205743.9, 206088.5, 206433.0, 206777.6, 207122.2, 207466.8, 207811.4, 208156.0, 208500.5, 208845.1, 209189.7, 209534.3, 209878.9, 210223.5, 210568.1, 210912.7, 211257.3, 211601.9, 211946.5, 212291.1, 212635.7, 212980.3, 213324.9, 213669.5, 214014.1, 214358.7, 214703.3, 215047.9, 215392.5, 215737.1, 216081.7, 216426.3, 216770.9, 217115.5, 217460.1, 217804.7, 218149.3, 218494.0, 218838.6, 219183.2, 219527.8, 219872.4, 220217.0, 220561.7, 220906.3, 221250.9, 221595.5, 221940.1, 222284.8, 222629.4, 222974.0, 223318.6, 223663.3, 224007.9, 224352.5, 224697.1, 225041.8, 225386.4, 225731.0, 226075.7, 226420.3, 226764.9, 227109.6, 227454.2, 227798.8, 228143.5, 228488.1, 228832.8, 229177.4, 229522.0, 229866.7, 230211.3, 230556.0, 230900.6, 231245.2, 231589.9, 231934.5, 232279.2, 232623.8, 232968.5, 233313.1, 233657.8, 234002.4, 234347.1, 234691.7, 235036.4, 235381.0, 235725.7, 236070.3, 236415.0, 236759.6, 237104.3, 237448.9, 237793.6, 238138.3, 238482.9, 238827.6, 239172.2, 239516.9, 239861.6, 240206.2, 240550.9, 240895.5, 241240.2, 241584.9, 241929.5, 242274.2, 242618.9, 242963.5, 243308.2, 243652.9, 243997.5, 244342.2, 244686.9, 245031.5, 245376.2, 245720.9, 246065.6, 246410.2, 246754.9, 247099.6, 247444.3, 247788.9, 248133.6, 248478.3, 248823.0, 249167.6, 249512.3, 249857.0, 250201.7, 250546.4, 250891.0, 251235.7, 251580.4, 251925.1, 252269.8, 252614.5, 252959.1, 253303.8, 253648.5, 253993.2, 254337.9, 254682.6, 255027.3, 255371.9, 255716.6, 256061.3, 256406.0, 256750.7, 257095.4, 257440.1, 257784.8, 258129.5, 258474.2, 258818.9, 259163.6, 259508.2, 259852.9, 260197.6, 260542.3, 260887.0, 261231.7, 261576.4, 261921.1, 262265.8, 262610.5, 262955.2, 263299.9, 263644.6, 263989.3, 264334.0, 264678.7, 265023.4, 265368.1, 265712.8, 266057.5, 266402.2, 266747.0, 267091.7, 267436.4, 267781.1, 268125.8, 268470.5, 268815.2, 269159.9, 269504.6, 269849.3, 270194.0, 270538.7, 270883.5, 271228.2, 271572.9, 271917.6, 272262.3, 272607.0, 272951.7, 273296.4, 273641.2, 273985.9, 274330.6, 274675.3, 275020.0, 275364.7, 275709.5, 276054.2, 276398.9, 276743.6, 277088.3, 277433.0, 277777.8, 278122.5, 278467.2, 278811.9, 279156.6, 279501.4, 279846.1, 280190.8, 280535.5, 280880.3, 281225.0, 281569.7, 281914.4, 282259.2, 282603.9, 282948.6, 283293.3, 283638.1, 283982.8, 284327.5, 284672.2, 285017.0, 285361.7, 285706.4, 286051.2, 286395.9, 286740.6, 287085.4, 287430.1, 287774.8, 288119.6, 288464.3, 288809.0, 289153.7, 289498.5, 289843.2, 290188.0, 290532.7, 290877.4, 291222.2, 291566.9, 291911.6, 292256.4, 292601.1, 292945.8, 293290.6, 293635.3, 293980.1, 294324.8, 294669.5, 295014.3, 295359.0, 295703.7, 296048.5, 296393.2, 296738.0, 297082.7, 297427.5, 297772.2, 298116.9, 298461.7, 298806.4, 299151.2, 299495.9, 299840.7, 300185.4, 300530.1, 300874.9, 301219.6, 301564.4, 301909.1, 302253.9, 302598.6, 302943.4, 303288.1, 303632.9, 303977.6, 304322.4, 304667.1, 305011.9, 305356.6, 305701.4, 306046.1, 306390.9, 306735.6, 307080.4, 307425.1, 307769.9, 308114.6, 308459.4, 308804.1, 309148.9, 309493.6, 309838.4, 310183.1, 310527.9, 310872.6, 311217.4, 311562.2, 311906.9, 312251.7, 312596.4, 312941.2, 313285.9, 313630.7, 313975.5, 314320.2, 314665.0, 315009.7, 315354.5, 315699.2, 316044.0, 316388.8, 316733.5, 317078.3, 317423.0, 317767.8, 318112.6, 318457.3, 318802.1, 319146.8, 319491.6, 319836.4, 320181.1, 320525.9, 320870.7, 321215.4, 321560.2, 321905.0, 322249.7, 322594.5, 322939.2, 323284.0, 323628.8, 323973.5, 324318.3, 324663.1, 325007.8, 325352.6, 325697.4, 326042.1, 326386.9, 326731.7, 327076.4, 327421.2, 327766.0, 328110.8, 328455.5, 328800.3, 329145.1, 329489.8, 329834.6, 330179.4, 330524.1, 330868.9, 331213.7, 331558.5, 331903.2, 332248.0, 332592.8, 332937.5, 333282.3, 333627.1, 333971.9, 334316.6, 334661.4, 335006.2, 335351.0, 335695.7, 336040.5, 336385.3, 336730.1, 337074.8, 337419.6, 337764.4, 338109.2, 338453.9, 338798.7, 339143.5, 339488.3, 339833.0, 340177.8, 340522.6, 340867.4, 341212.1, 341556.9, 341901.7, 342246.5, 342591.3, 342936.0, 343280.8, 343625.6, 343970.4, 344315.2, 344659.9, 345004.7 };
    std::vector<G4double> LXe_electron_yield = { 0.0, 212.8, 396.3, 590.9, 794.0, 1006.1, 1228.5, 1462.3, 1708.3, 1967.1, 2238.9, 2523.7, 2821.4, 3131.6, 3453.7, 3787.0, 4130.8, 4484.3, 4846.8, 5217.4, 5595.4, 5979.9, 6370.4, 6766.1, 7166.4, 7570.7, 7978.6, 8389.6, 8803.2, 9219.0, 9636.8, 10056.2, 10477.0, 10898.9, 11321.7, 11745.2, 12169.3, 12593.8, 13018.6, 13443.6, 13868.7, 14293.8, 14718.9, 15143.8, 15568.6, 15993.2, 16417.5, 16841.6, 17265.4, 17688.8, 18111.9, 18534.7, 18957.1, 19379.1, 19800.8, 20222.0, 20642.9, 21063.4, 21483.5, 21903.3, 22322.6, 22741.6, 23160.2, 23578.4, 23996.3, 24413.8, 24831.0, 25247.8, 25664.3, 26080.5, 26496.3, 26911.8, 27327.0, 27741.9, 28156.4, 28570.7, 28984.7, 29398.4, 29811.9, 30225.1, 30638.0, 31050.6, 31463.0, 31875.2, 32287.1, 32698.8, 33110.3, 33521.5, 33932.5, 34343.3, 34753.9, 35164.3, 35574.5, 35984.5, 36394.3, 36803.9, 37213.4, 37622.7, 38031.8, 38440.7, 38849.5, 39258.1, 39666.5, 40074.8, 40482.9, 40890.9, 41298.8, 41706.5, 42114.1, 42521.5, 42928.9, 43336.0, 43743.1, 44150.0, 44556.9, 44963.6, 45370.1, 45776.6, 46183.0, 46589.2, 46995.4, 47401.4, 47807.4, 48213.2, 48619.0, 49024.6, 49430.2, 49835.7, 50241.1, 50646.4, 51051.6, 51456.7, 51861.7, 52266.7, 52671.6, 53076.4, 53481.1, 53885.8, 54290.3, 54694.9, 55099.3, 55503.7, 55908.0, 56312.2, 56716.4, 57120.5, 57524.5, 57928.5, 58332.4, 58736.3, 59140.1, 59543.8, 59947.5, 60351.2, 60754.7, 61158.3, 61561.7, 61965.2, 62368.5, 62771.8, 63175.1, 63578.3, 63981.5, 64384.6, 64787.7, 65190.8, 65593.8, 65996.7, 66399.6, 66802.5, 67205.3, 67608.1, 68010.8, 68413.5, 68816.2, 69218.8, 69621.4, 70024.0, 70426.5, 70829.0, 71231.4, 71633.8, 72036.2, 72438.6, 72840.9, 73243.1, 73645.4, 74047.6, 74449.8, 74851.9, 75254.0, 75656.1, 76058.2, 76460.2, 76862.2, 77264.2, 77666.2, 78068.1, 78470.0, 78871.8, 79273.7, 79675.5, 80077.3, 80479.0, 80880.8, 81282.5, 81684.2, 82085.8, 82487.5, 82889.1, 83290.7, 83692.3, 84093.8, 84495.4, 84896.9, 85298.4, 85699.8, 86101.3, 86502.7, 86904.1, 87305.5, 87706.9, 88108.2, 88509.5, 88910.8, 89312.1, 89713.4, 90114.7, 90515.9, 90917.1, 91318.3, 91719.5, 92120.6, 92521.8, 92922.9, 93324.0, 93725.1, 94126.2, 94527.3, 94928.3, 95329.4, 95730.4, 96131.4, 96532.4, 96933.4, 97334.3, 97735.3, 98136.2, 98537.1, 98938.0, 99338.9, 99739.8, 100140.7, 100541.5, 100942.3, 101343.2, 101744.0, 102144.8, 102545.6, 102946.3, 103347.1, 103747.8, 104148.6, 104549.3, 104950.0, 105350.7, 105751.4, 106152.1, 106552.7, 106953.4, 107354.0, 107754.7, 108155.3, 108555.9, 108956.5, 109357.1, 109757.7, 110158.3, 110558.8, 110959.4, 111359.9, 111760.4, 112161.0, 112561.5, 112962.0, 113362.5, 113762.9, 114163.4, 114563.9, 114964.3, 115364.8, 115765.2, 116165.7, 116566.1, 116966.5, 117366.9, 117767.3, 118167.7, 118568.1, 118968.4, 119368.8, 119769.1, 120169.5, 120569.8, 120970.2, 121370.5, 121770.8, 122171.1, 122571.4, 122971.7, 123372.0, 123772.3, 124172.5, 124572.8, 124973.1, 125373.3, 125773.5, 126173.8, 126574.0, 126974.2, 127374.5, 127774.7, 128174.9, 128575.1, 128975.2, 129375.4, 129775.6, 130175.8, 130575.9, 130976.1, 131376.3, 131776.4, 132176.5, 132576.7, 132976.8, 133376.9, 133777.0, 134177.2, 134577.3, 134977.4, 135377.4, 135777.5, 136177.6, 136577.7, 136977.8, 137377.8, 137777.9, 138178.0, 138578.0, 138978.1, 139378.1, 139778.1, 140178.2, 140578.2, 140978.2, 141378.2, 141778.2, 142178.2, 142578.2, 142978.2, 143378.2, 143778.2, 144178.2, 144578.2, 144978.1, 145378.1, 145778.1, 146178.0, 146578.0, 146977.9, 147377.9, 147777.8, 148177.8, 148577.7, 148977.6, 149377.6, 149777.5, 150177.4, 150577.3, 150977.2, 151377.1, 151777.0, 152176.9, 152576.8, 152976.7, 153376.6, 153776.5, 154176.3, 154576.2, 154976.1, 155375.9, 155775.8, 156175.7, 156575.5, 156975.4, 157375.2, 157775.1, 158174.9, 158574.7, 158974.6, 159374.4, 159774.2, 160174.1, 160573.9, 160973.7, 161373.5, 161773.3, 162173.1, 162572.9, 162972.7, 163372.5, 163772.3, 164172.1, 164571.9, 164971.7, 165371.5, 165771.2, 166171.0, 166570.8, 166970.5, 167370.3, 167770.1, 168169.8, 168569.6, 168969.3, 169369.1, 169768.8, 170168.6, 170568.3, 170968.1, 171367.8, 171767.5, 172167.3, 172567.0, 172966.7, 173366.5, 173766.2, 174165.9, 174565.6, 174965.3, 175365.0, 175764.7, 176164.4, 176564.2, 176963.9, 177363.5, 177763.2, 178162.9, 178562.6, 178962.3, 179362.0, 179761.7, 180161.4, 180561.0, 180960.7, 181360.4, 181760.1, 182159.7, 182559.4, 182959.1, 183358.7, 183758.4, 184158.0, 184557.7, 184957.3, 185357.0, 185756.6, 186156.3, 186555.9, 186955.6, 187355.2, 187754.9, 188154.5, 188554.1, 188953.7, 189353.4, 189753.0, 190152.6, 190552.3, 190951.9, 191351.5, 191751.1, 192150.7, 192550.3, 192949.9, 193349.6, 193749.2, 194148.8, 194548.4, 194948.0, 195347.6, 195747.2, 196146.8, 196546.4, 196946.0, 197345.5, 197745.1, 198144.7, 198544.3, 198943.9, 199343.5, 199743.0, 200142.6, 200542.2, 200941.8, 201341.3, 201740.9, 202140.5, 202540.1, 202939.6, 203339.2, 203738.7, 204138.3, 204537.9, 204937.4, 205337.0, 205736.5, 206136.1, 206535.6, 206935.2, 207334.7, 207734.3, 208133.8, 208533.4, 208932.9, 209332.4, 209732.0, 210131.5, 210531.1, 210930.6, 211330.1, 211729.6, 212129.2, 212528.7, 212928.2, 213327.8, 213727.3, 214126.8, 214526.3, 214925.8, 215325.4, 215724.9, 216124.4, 216523.9, 216923.4, 217322.9, 217722.4, 218121.9, 218521.5, 218921.0, 219320.5, 219720.0, 220119.5, 220519.0, 220918.5, 221318.0, 221717.5, 222117.0, 222516.4, 222915.9, 223315.4, 223714.9, 224114.4, 224513.9, 224913.4, 225312.9, 225712.3, 226111.8, 226511.3, 226910.8, 227310.3, 227709.7, 228109.2, 228508.7, 228908.2, 229307.6, 229707.1, 230106.6, 230506.1, 230905.5, 231305.0, 231704.5, 232103.9, 232503.4, 232902.8, 233302.3, 233701.8, 234101.2, 234500.7, 234900.1, 235299.6, 235699.0, 236098.5, 236498.0, 236897.4, 237296.9, 237696.3, 238095.8, 238495.2, 238894.6, 239294.1, 239693.5, 240093.0, 240492.4, 240891.9, 241291.3, 241690.7, 242090.2, 242489.6, 242889.1, 243288.5, 243687.9, 244087.4, 244486.8, 244886.2, 245285.6, 245685.1, 246084.5, 246483.9, 246883.4, 247282.8, 247682.2, 248081.6, 248481.1, 248880.5, 249279.9, 249679.3, 250078.7, 250478.2, 250877.6, 251277.0, 251676.4, 252075.8, 252475.2, 252874.6, 253274.1, 253673.5, 254072.9, 254472.3, 254871.7, 255271.1, 255670.5, 256069.9, 256469.3, 256868.7, 257268.1, 257667.5, 258066.9, 258466.3, 258865.7, 259265.1, 259664.5, 260063.9, 260463.3, 260862.7, 261262.1, 261661.5, 262060.9, 262460.3, 262859.7, 263259.1, 263658.5, 264057.9, 264457.3, 264856.6, 265256.0, 265655.4, 266054.8, 266454.2, 266853.6, 267253.0, 267652.3, 268051.7, 268451.1, 268850.5, 269249.9, 269649.2, 270048.6, 270448.0, 270847.4, 271246.8, 271646.1, 272045.5, 272444.9, 272844.3, 273243.6, 273643.0, 274042.4, 274441.7, 274841.1, 275240.5, 275639.9, 276039.2, 276438.6, 276838.0, 277237.3, 277636.7, 278036.1, 278435.4, 278834.8, 279234.1, 279633.5, 280032.9, 280432.2, 280831.6, 281230.9, 281630.3, 282029.7, 282429.0, 282828.4, 283227.7, 283627.1, 284026.4, 284425.8, 284825.2, 285224.5, 285623.9, 286023.2, 286422.6, 286821.9, 287221.3, 287620.6, 288020.0, 288419.3, 288818.7, 289218.0, 289617.4, 290016.7, 290416.0, 290815.4, 291214.7, 291614.1, 292013.4, 292412.8, 292812.1, 293211.5, 293610.8, 294010.1, 294409.5, 294808.8, 295208.2, 295607.5, 296006.8, 296406.2, 296805.5, 297204.8, 297604.2, 298003.5, 298402.8, 298802.2, 299201.5, 299600.8, 300000.2, 300399.5, 300798.8, 301198.2, 301597.5, 301996.8, 302396.2, 302795.5, 303194.8, 303594.1, 303993.5, 304392.8, 304792.1, 305191.5, 305590.8, 305990.1, 306389.4, 306788.8, 307188.1, 307587.4, 307986.7, 308386.0, 308785.4, 309184.7, 309584.0, 309983.3, 310382.6, 310782.0, 311181.3, 311580.6, 311979.9, 312379.2, 312778.6, 313177.9, 313577.2, 313976.5, 314375.8, 314775.1, 315174.4, 315573.8, 315973.1, 316372.4, 316771.7, 317171.0, 317570.3, 317969.6, 318368.9, 318768.2, 319167.6, 319566.9, 319966.2, 320365.5, 320764.8, 321164.1, 321563.4, 321962.7, 322362.0, 322761.3, 323160.6, 323559.9, 323959.2, 324358.5, 324757.8, 325157.2, 325556.5, 325955.8, 326355.1, 326754.4, 327153.7, 327553.0, 327952.3, 328351.6, 328750.9, 329150.2, 329549.5, 329948.8, 330348.1, 330747.4, 331146.6, 331545.9, 331945.2, 332344.5, 332743.8, 333143.1, 333542.4, 333941.7, 334341.0, 334740.3, 335139.6, 335538.9, 335938.2, 336337.5, 336736.8, 337136.1, 337535.4, 337934.6, 338333.9, 338733.2, 339132.5, 339531.8, 339931.1, 340330.4, 340729.7, 341129.0, 341528.2, 341927.5, 342326.8, 342726.1, 343125.4, 343524.7, 343924.0, 344323.2, 344722.5, 345121.8, 345521.1, 345920.4, 346319.7, 346718.9, 347118.2, 347517.5, 347916.8, 348316.1, 348715.4, 349114.6, 349513.9, 349913.2, 350312.5, 350711.8, 351111.0, 351510.3, 351909.6, 352308.9, 352708.1, 353107.4, 353506.7, 353906.0, 354305.3, 354704.5, 355103.8, 355503.1, 355902.4, 356301.6, 356700.9, 357100.2, 357499.5, 357898.7, 358298.0, 358697.3, 359096.6, 359495.8, 359895.1, 360294.4, 360693.6, 361092.9, 361492.2, 361891.5, 362290.7, 362690.0, 363089.3, 363488.5, 363887.8, 364287.1, 364686.3, 365085.6, 365484.9, 365884.1, 366283.4, 366682.7, 367081.9, 367481.2, 367880.5, 368279.7, 368679.0, 369078.3, 369477.5, 369876.8, 370276.1, 370675.3, 371074.6, 371473.9, 371873.1, 372272.4, 372671.7, 373070.9, 373470.2, 373869.4, 374268.7, 374668.0, 375067.2, 375466.5, 375865.7, 376265.0, 376664.3, 377063.5, 377462.8, 377862.0, 378261.3, 378660.6, 379059.8, 379459.1, 379858.3, 380257.6, 380656.9, 381056.1, 381455.4, 381854.6, 382253.9, 382653.1, 383052.4, 383451.7, 383850.9, 384250.2, 384649.4, 385048.7, 385447.9, 385847.2, 386246.4, 386645.7, 387044.9, 387444.2, 387843.4, 388242.7, 388642.0, 389041.2, 389440.5, 389839.7, 390239.0, 390638.2, 391037.5, 391436.7, 391836.0, 392235.2, 392634.5, 393033.7, 393433.0, 393832.2, 394231.5, 394630.7, 395030.0, 395429.2, 395828.5, 396227.7, 396627.0, 397026.2, 397425.5, 397824.7, 398223.9, 398623.2, 399022.4 };
    
    G4MaterialPropertiesTable *LXe_mt = new G4MaterialPropertiesTable();

    LXe_mt->AddProperty("SCINTILLATIONCOMPONENT1", LXe_PP, LXe_SCINT);
    //LXe_mt->AddProperty("SCINTILLATIONCOMPONENT2", LXe_PP, LXe_SCINT);
    LXe_mt->AddProperty("RINDEX",        LXe_PP, LXe_RIND);
    LXe_mt->AddProperty("ABSLENGTH",     LXe_PP, LXe_ABSL);
    LXe_mt->AddProperty("ELECTRONSCINTILLATIONYIELD", LXe_scint_e, LXe_electron_yield); 
    LXe_mt->AddProperty("SCINTILLATIONYIELD",LXe_scint_e, LXe_photon_yield, true); 
    LXe_mt->AddProperty("RAYLEIGH", LXe_PP, {0.2*m, 0.2*m, 0.2*m}, 2);
    //LXe_mt->AddConstProperty("SCINTILLATIONYIELD1", 1.);
    //LXe_mt->AddConstProperty("SCINTILLATIONYIELD2", 1.);
    // and 13eV creation energy for photons - may be 15eV?
    // Fano factor assumed 1; should be much less for Xe ~ 0.13
    // but the Fano factor is already partially included in the correlated
    // electron production - therefore not the absolute Fano factor here:

    LXe_mt->AddConstProperty("ELECTRONSCINTILLATIONYIELD1", 0.);
    LXe_mt->AddConstProperty("ELECTRONSCINTILLATIONYIELD2", 1.);

    LXe_mt->AddProperty("ALPHASCINTILLATIONYIELD", LXe_scint_e_basic, LXe_scint_alpha); // include QE 20%
    LXe_mt->AddConstProperty("ALPHASCINTILLATIONYIELD1", 1.);
    LXe_mt->AddConstProperty("ALPHASCINTILLATIONYIELD2", 0.);

    LXe_mt->AddProperty("IONSCINTILLATIONYIELD", LXe_scint_e_basic, LXe_scint_ion); // include QE 20%
    LXe_mt->AddConstProperty("IONSCINTILLATIONYIELD1", 1.);
    LXe_mt->AddConstProperty("IONSCINTILLATIONYIELD2", 0.);

    LXe_mt->AddConstProperty("RESOLUTIONSCALE",1.0);
    LXe_mt->AddConstProperty("SCINTILLATIONTIMECONSTANT1",20.*ns);
    LXe_mt->AddConstProperty("SCINTILLATIONTIMECONSTANT2",45.*ns);
    LXe->SetMaterialPropertiesTable(LXe_mt);

    std::vector<G4double> GXe_PP = { 7.0*eV, 7.07*eV, 7.14*eV };
    std::vector<G4double> GXe_SCINT = { 0.1, 1.0, 0.1 };
    std::vector<G4double> GXe_RIND  = { 1.00, 1.00, 1.00 };
    std::vector<G4double> GXe_ABSL  = { 100*m, 100*m, 100*m}; //atten length
    std::vector<G4double> GXe_scint_e = { 0.*MeV, 10.*MeV };
    std::vector<G4double> GXe_scint_default = { 0., 120000.};
    std::vector<G4double> GXe_scint_alpha = { 0., 132000.};
    std::vector<G4double> GXe_scint_ion = { 0., 24000.};
    G4MaterialPropertiesTable *GXe_mt = new G4MaterialPropertiesTable();
    GXe_mt->AddProperty("SCINTILLATIONCOMPONENT1", GXe_PP, GXe_SCINT);
    GXe_mt->AddProperty("SCINTILLATIONCOMPONENT2", GXe_PP, GXe_SCINT);
    GXe_mt->AddProperty("RINDEX",        GXe_PP, GXe_RIND);
    GXe_mt->AddProperty("ABSLENGTH",     GXe_PP, GXe_ABSL);
    //GXe_mt->AddConstProperty("SCINTILLATIONYIELD",120000./MeV); // include QE 20%
    GXe_mt->AddProperty("ELECTRONSCINTILLATIONYIELD", LXe_scint_e, LXe_electron_yield); 
    GXe_mt->AddProperty("SCINTILLATIONYIELD",LXe_scint_e, LXe_photon_yield, true); 

    //GXe_mt->AddProperty("ELECTRONSCINTILLATIONYIELD", GXe_scint_e, GXe_scint_default); // include QE 20%
    GXe_mt->AddConstProperty("ELECTRONSCINTILLATIONYIELD1", 0.);
    GXe_mt->AddConstProperty("ELECTRONSCINTILLATIONYIELD2", 1.);

    GXe_mt->AddProperty("ALPHASCINTILLATIONYIELD", GXe_scint_e, GXe_scint_alpha); // include QE 20%
    GXe_mt->AddConstProperty("ALPHASCINTILLATIONYIELD1", 1.);
    GXe_mt->AddConstProperty("ALPHASCINTILLATIONYIELD2", 0.);

    GXe_mt->AddProperty("IONSCINTILLATIONYIELD", LXe_scint_e_basic, LXe_scint_ion); // include QE 20%
    GXe_mt->AddConstProperty("IONSCINTILLATIONYIELD1", 1.);
    GXe_mt->AddConstProperty("IONSCINTILLATIONYIELD2", 0.);

    GXe_mt->AddConstProperty("RESOLUTIONSCALE",1.0);
    GXe_mt->AddConstProperty("SCINTILLATIONTIMECONSTANT1",20.*ns);
    GXe_mt->AddConstProperty("SCINTILLATIONTIMECONSTANT2",45.*ns);
    GXe->SetMaterialPropertiesTable(GXe_mt);


    lXeMat = nist->FindOrBuildMaterial("LXe");
    gXeMat = nist->FindOrBuildMaterial("GXe");

    // making quartz
    G4Element* O  = new G4Element
        (name="Oxygen"  ,symbol="O" , z= 8., a=16.00*g/mole);
    G4Element* Si = new G4Element
        (name="Silicon",symbol="Si" , z= 14., a=28.09*g/mole);
    G4Material* quartz = new G4Material
        (name="quartz", density=2.200*g/cm3, ncomponents=2);
    quartz->AddElement(Si, 1);
    quartz->AddElement(O , 2);

    G4MaterialPropertiesTable *quartz_mt = new G4MaterialPropertiesTable();
    quartz_mt->AddProperty("RINDEX", { 5.0*eV, 6.69*eV, 7.50*eV }, { 1.51, 1.57, 1.61 });
    quartz_mt->AddProperty("ABSLENGTH", { 5.0*eV, 6.69*eV, 7.50*eV }, { 3.0*cm, 3.0*cm, 3.0*cm });
    quartz->SetMaterialPropertiesTable(quartz_mt);

    quartzMat = nist->FindOrBuildMaterial("quartz");
    

    G4Material* vacuum = new G4Material 
    (name="Vacuum", z=1., a=1.*g/mole, density=1.e-20*g/cm3,
     kStateGas, temperature=0.1*kelvin, pressure=1.e-20*bar);
     worldMat=nist->FindOrBuildMaterial("Vacuum");

        // aluminium
    G4Element* Al = new G4Element
        (name="Aluminium"  ,symbol="Al" , z= 13., a=26.98*g/mole);  
    G4Material* metalAl = new G4Material
        (name="MetalAluminium", density=2.700*g/cm3, ncomponents=1);
    metalAl->AddElement(Al, 1);


    // photocathode aluminium
    G4Material* cathmetalAl = new G4Material
        (name="CathodeMetalAluminium", density=2.700*g/cm3, ncomponents=1);
    cathmetalAl->AddElement(Al, 1);


    G4MaterialPropertiesTable* qeTable = LoadQuantumEfficiency("eff.dat");
    if (qeTable) {
        cathmetalAl->SetMaterialPropertiesTable(qeTable);
    }
    photocathodeMat = nist->FindOrBuildMaterial("CathodeMetalAluminium");
    
    //PTFE to be done in bulk

      // titanium
    G4double z = 22.;
    G4double a = 47.867 * g/mole;
    G4double density = 4.54 * g/cm3;
    
    G4Material* titanium = new G4Material("Titanium", z, a, density);

    cryoMat = nist->FindOrBuildMaterial("Titanium");

    // copper
    G4Element* Cu = new G4Element
        (name="Copper"  ,symbol="Cu" , z= 29., a=63.55*g/mole);  
    G4Material* metalCu = new G4Material
        (name="MetalCopper", density=8.960*g/cm3, ncomponents=1);
    metalCu->AddElement(Cu, 1);
    copperMat = nist->FindOrBuildMaterial("MetalCopper");

    // kovar
    // Define elements
    G4Element* elFe = nist->FindOrBuildElement("Fe");
    G4Element* elNi = nist->FindOrBuildElement("Ni");
    G4Element* elCo = nist->FindOrBuildElement("Co");
    G4Element* elMn = nist->FindOrBuildElement("Mn");

    G4double kovarDensity = 8.36 * g/cm3;
    G4Material* kovar = new G4Material("Kovar", kovarDensity, 4);
    kovar->AddElement(elFe, 53.7 * perCent);
    kovar->AddElement(elNi, 29.0 * perCent);
    kovar->AddElement(elCo, 17.0 * perCent);
    kovar->AddElement(elMn, 0.3 * perCent);
    kovarMat = nist->FindOrBuildMaterial("Kovar");


}

MyDetectorConstruction::~MyDetectorConstruction()
{
}

void MyDetectorConstruction::ConstructSDandField() {

    G4SDManager* sdManager = G4SDManager::GetSDMpointer();

    MySensitiveDetector* sensDet = new MySensitiveDetector("SensitiveDetector");

    sdManager->AddNewDetector(sensDet);  // Register it
    if (logicPhotocathode) {
        logicPhotocathode->SetSensitiveDetector(sensDet);
        G4cout << "Sensitive detector attached to Photocathode volume!" << G4endl;
    } else {
        G4cerr << "Error: logicPhotocathode not found!" << G4endl;
    }
}

    G4VPhysicalVolume* MyDetectorConstruction::Construct()
    {

        // PTFE
    // Define elements
    G4NistManager *nist = G4NistManager::Instance();
    G4Element* elC = nist->FindOrBuildElement("C");
    G4Element* elF = nist->FindOrBuildElement("F");
    // Define PTFE material (C2F4)n
    G4Material* PTFE = new G4Material("PTFE", 2.2 * g/cm3, 2);  // Density ~2.2 g/cm³
    PTFE->AddElement(elC, 2);
    PTFE->AddElement(elF, 4);

    // Define material properties for PTFE
    const G4int nEntries = 2;
    G4double photonEnergy[nEntries] = {1.0 * eV, 7.5 * eV};
    G4double reflectivity[nEntries]  = {.977, .977};  // 97.7% reflective from Anna's slides ; not 100% reflective

    G4MaterialPropertiesTable* ptfeMPT = new G4MaterialPropertiesTable();
    ptfeMPT->AddProperty("REFLECTIVITY", photonEnergy, reflectivity, nEntries);

    // Optional: add refractive index (important for dielectric_dielectric)
    G4double refractiveIndex[nEntries] = {1.3, 1.3};
    ptfeMPT->AddProperty("RINDEX", photonEnergy, refractiveIndex, nEntries);

    PTFE->SetMaterialPropertiesTable(ptfeMPT);
    PTFEMat = nist->FindOrBuildMaterial("PTFE");


    // Define the optical surface
    G4OpticalSurface* ptfeSurface = new G4OpticalSurface("PTFE_Surface");
    ptfeSurface->SetType(dielectric_dielectric);  // PTFE is a dielectric
    ptfeSurface->SetFinish(groundfrontpainted);   
    ptfeSurface->SetModel(unified);               // unified model
    ptfeSurface->SetMaterialPropertiesTable(ptfeMPT);

    // Initialize vis attributes
    G4Colour glassyBlue(0.0, 0.9, 0.9, 1); // R, G, B, Alpha
    G4VisAttributes* glassVis = new G4VisAttributes(glassyBlue);
    glassVis->SetForceSolid(true);
    G4Colour white(1., 1., 1., 1); // R, G, B, Alpha
    G4VisAttributes* whiteVis = new G4VisAttributes(white);
    whiteVis->SetForceSolid(true);
    G4Colour red(1., 0., 0., 0.8); // R, G, B, Alpha
    G4VisAttributes* redVis = new G4VisAttributes(red);
    redVis->SetForceSolid(true);

    //Initialize world volume
    G4double worldSize = 1.0*m;
    solidWorld = new G4Box("solidWorld", worldSize, worldSize, worldSize);
    logicWorld = new G4LogicalVolume(solidWorld, worldMat, "logicWorld");
    physWorld = new G4PVPlacement(0, G4ThreeVector(), logicWorld, "physWorld", 0, false, 0, true);

    // TPC Params
    G4int numSides = 12; // Dodecagon
    G4double xenonRadius = 0.25*m;
    G4double gxeHeight = 0.055*m;
    G4double lxeHeight = 0.524*m;
    G4double xenonHeight = lxeHeight + gxeHeight ; //+ 3.7 * cm;
    // NEED TO MAKE THE BIT BETWEEN PMTS AND XENON LET LIGHT TRAVEL


    // Classic medium purple, semi-opaque
    // G4Colour purpleColor(0.6, 0.0, 0.8, 0.8); // R, G, B, Alpha
    // G4VisAttributes* purpleVis = new G4VisAttributes(purpleColor);
    // purpleVis->SetForceSolid(true);
    // G4Colour lilacColor(0.5, 0.0, 1., 0.8); // R, G, B, Alpha
    // G4VisAttributes* lilacVis = new G4VisAttributes(lilacColor);
    // lilacVis->SetForceSolid(true);


    // Wall Params
    G4double wallThickness = 0.0285*m;
    G4double wallOuterRadius = xenonRadius + wallThickness;

    // PMT parameters
    G4double pmtRadius = 0.028 * m;
    G4double pmtThickness = 0.005 * m;
    G4double photocathodeRadius = 22.5 * mm;
    G4double photocathodeThickness = 0.002 * m;
    G4double kovarHeight = pmtThickness + photocathodeThickness + 0.001*cm;

    // PTFE Tile On Top/Bottom Params
    // PTFE tile shape: thin dodecagon plate
    G4double ptfeTileThickness = 0.005 * m;
    G4double tileInnerRadius = 0.0;             // center filled
    G4double tileOuterRadius = wallOuterRadius; // slightly beyond active volume
    G4double startAngle = 0.*deg;
    G4double totalAngle = 360.*deg;

    // Field rings
    G4double ringThickness = 12.7 * mm;             // Radial thickness of ring
    G4double ringRadius = xenonRadius + wallThickness / 2;  // in the wall
    G4double ringHeight = 3.2 * mm;                // Axial height of each ring
    G4double activeHeight = xenonHeight;
    G4int numRings = 48;  // Number of rings
    // Spacing between rings - evenly spaced
    G4double ringSpacing = 1 * cm;


    // Inner Cryo Params
    G4double innerCryoOuterRadius = (24.25 * 2.54 * cm) / 2;   // 24.25 inch diameter
    G4double innerCryoHeight = 39.75 * 2.54 * cm;              // 39.75 inch tall
    G4ThreeVector cavityPos = G4ThreeVector(0., 0., 0.);

    // Vaccuum between cryostats params
    G4double vacuumMargin = 20.0 * cm;  // Guess: can adjust buffer space

    G4double vacuumRadius = innerCryoOuterRadius + vacuumMargin;
    G4double vacuumHeight = innerCryoHeight + 2 * 20 * cm;

    // Outer Cryo Params
    G4double cryostatThickness = 0.0056642 * m;  // Cryostat thickness
    G4double outerCryoRadius = vacuumRadius + cryostatThickness; //Guess
    G4double outerCryoHeight = innerCryoHeight + 2 * 20 * cm + 2 * cryostatThickness;

    // Copper params
    G4double copperDiskRadius = 27.5 * cm;  // 55 cm diameter → 27.5 cm radius
    G4double copperDiskThickness = 5.0 * cm;


    // ----------------------------------------------------------
    // --- TPC ---
    // Define dodecagon xenon volume (12-sided prism)
    G4double zPlanes[2] = { -xenonHeight/2, xenonHeight/2 };
    G4double rInner[2] = { 0.0, 0.0 };
    G4double rOuter[2] = { xenonRadius, xenonRadius };

    G4Polyhedra* solidXenon = new G4Polyhedra("solidXenon", 0.*deg, 360.*deg, numSides, 2, zPlanes, rInner, rOuter);
    G4LogicalVolume* logicXenon = new G4LogicalVolume(solidXenon, worldMat, "logicXenon");
    G4VPhysicalVolume* physXenon = new G4PVPlacement(nullptr, {}, logicXenon, "physXenon", logicWorld, false, 0, true);

    // Liquid Xenon (lower part)
    G4double lxeZPlanes[2] = { -lxeHeight/2, lxeHeight/2 };
    G4double lxeROuter[2] = { xenonRadius, xenonRadius };
    G4Polyhedra* solidLXe = new G4Polyhedra("solidLXe", 0.*deg, 360.*deg, numSides, 2, lxeZPlanes, rInner, lxeROuter);
    G4LogicalVolume* logicLXe = new G4LogicalVolume(solidLXe, lXeMat, "logicLXe");
    //logicLXe->SetVisAttributes(purpleVis);
    //G4UserLimits* userLimits = new G4UserLimits();
    //userLimits->SetMaxAllowedStep(1.*mm);  // or 1 mm, 2 mm etc.
    //logicLXe->SetUserLimits(userLimits);


    G4ThreeVector lxePos(0., 0., -gxeHeight/2);
    new G4PVPlacement(nullptr, lxePos, logicLXe, "physLXe", logicXenon, false, 0, true);

    // Gaseous Xenon (upper part)
    G4double gxeZPlanes[2] = { -gxeHeight/2, gxeHeight/2 };
    G4double gxeROuter[2] = { xenonRadius, xenonRadius };
    G4Polyhedra* solidGXe = new G4Polyhedra("solidGXe", 0.*deg, 360.*deg, numSides, 2, gxeZPlanes, rInner, gxeROuter);
    G4LogicalVolume* logicGXe = new G4LogicalVolume(solidGXe, gXeMat, "logicGXe");
    //logicGXe->SetVisAttributes(lilacVis);

    G4ThreeVector gxePos(0., 0., lxeHeight/2);
    new G4PVPlacement(nullptr, gxePos, logicGXe, "physGXe", logicXenon, false, 0, true);

    fScoringVolume = logicLXe;

    // --- Field Rings ---
    // Define the ring solid
    G4Tubs* solidRing = new G4Tubs("solidRing", ringRadius, ringRadius + ringThickness, ringHeight / 2, 0., 360.*deg);

    // Create logical volume with copper material
    G4LogicalVolume* logicRing = new G4LogicalVolume(solidRing, copperMat, "logicRing");

    // Set copper colour
    // G4Colour copperColor(0.72, 0.45, 0.20, 0.6); // R, G, B, Alpha
    // G4VisAttributes* copperVis = new G4VisAttributes(copperColor);
    // copperVis->SetForceSolid(false);
    // logicRing->SetVisAttributes(copperVis);

    // --- Place the field rings ---
    for (G4int i = 1; i < numRings+1; ++i) {
        // Centered on Z = 0; distribute along the Z-axis
        G4double zPos = (-activeHeight / 2) + i * ringSpacing;
        //G4cout << "zPos of ring " << i - 1 << " is: " << zPos << G4endl;


        // Place each field ring in the world
        new G4PVPlacement(
            nullptr,
            G4ThreeVector(0., 0., zPos),        // Position of the ring along Z-axis
            logicRing,                           // Logical volume for the ring
            "physRing",                          // Name of the physical volume
            logicWorld,                          // The world logical volume
            false,
            i,                                   // Unique ID for each ring
            true                                 // Check overlap
        );

    }

    // --- PTFE wall --- (around xenon, with holes for rings)
    G4double wallROuter[2] = { wallOuterRadius, wallOuterRadius };
    G4double wallZPlanes[2] = { -xenonHeight/2 , xenonHeight/2};

    // Polyhedron for the PTFE wall (with no holes yet)
    G4Polyhedra* solidWall = new G4Polyhedra("solidWall", 0.*deg, 360.*deg, numSides, 2, wallZPlanes, rOuter, wallROuter);

    // Create a copy of the wall to modify (subtract rings)
    G4VSolid* wallWithHoles = solidWall;

    // Loop over all rings and subtract them from the wall
    for (G4int i = 1; i < numRings+1; ++i) {
        // Centered on Z = 0; distribute along the Z-axis
        G4double zPos = (-activeHeight / 2) + i * ringSpacing ;

        // Position of the current ring
        G4ThreeVector ringPos(0., 0., zPos);

        // Subtract the current ring from the wall
        wallWithHoles = new G4SubtractionSolid("wallWithHoles", wallWithHoles, solidRing, nullptr, ringPos);
    }

    // Logical volume for the PTFE wall (with holes)
    G4LogicalVolume* logicWall = new G4LogicalVolume(wallWithHoles, PTFEMat, "logicWall");
    new G4LogicalSkinSurface("PTFE_Skin", logicWall, ptfeSurface);

    // Place the PTFE wall with holes (around the Xenon volume)
    new G4PVPlacement(nullptr, {}, logicWall, "physWall", logicWorld, false, 0, true);


    // --- PMTs ---
    solidPMT = new G4Tubs("solidPMT", 0., pmtRadius, pmtThickness/2, 0., 360.*deg);
    logicPMT = new G4LogicalVolume(solidPMT, quartzMat, "logicPMT");
    //logicPMT->SetVisAttributes(redVis);

    // Photocathodes
    // Define the solid photocathode
    G4Tubs* solidPhotocathode = new G4Tubs("solidPhotocathode", 0., photocathodeRadius, photocathodeThickness/2, 0., 360.*deg);
    logicPhotocathode = new G4LogicalVolume(solidPhotocathode, photocathodeMat, "logicPhotocathode");
    logicPhotocathode->SetVisAttributes(whiteVis);
    fDetectorVolume = logicPhotocathode;

    // Define the solid kovar (outer casing)
    G4Tubs* solidKovar = new G4Tubs("solidKovar", 0., pmtRadius, kovarHeight/2, 0., 360.*deg);

    // Position of the subtraction solid (cut the cavity from the top)
    G4ThreeVector cavityPosCasing(0, 0, (kovarHeight - photocathodeThickness) / 2);

    // Subtract the cavity from the top of the kovar to make room for the photocathode
    G4SubtractionSolid* solidCasing = new G4SubtractionSolid("solidCasing", solidKovar, solidPhotocathode, nullptr, cavityPosCasing);
    G4LogicalVolume* logicCasing = new G4LogicalVolume(solidCasing, kovarMat, "logicCasing");
    logicCasing->SetVisAttributes(glassVis);

    // Define non-overlapping spacing
    G4double pitch = 2.4 * pmtRadius;              // No overlap
    G4double dx = pitch * std::sqrt(3)/2.0;        // Horizontal spacing in hex grid
    G4double dy = pitch * 0.75;                    // Vertical spacing

    int gridRadius = 4;  // 4 gives 5 rings = 61 PMTs (not sure why -1)
    int pmtIndex = 0;

    // Define z positions
    G4double assemblySpacing = xenonHeight + 2*pmtThickness; // Distance between the two assemblies

    G4double casingZ = (kovarHeight + assemblySpacing) / 2.0;
    G4double cathodeZ = casingZ - (kovarHeight - photocathodeThickness)/2;  // match subtraction


    for (int q = -gridRadius; q <= gridRadius; ++q) {
         int r1 = std::max(-gridRadius, -q - gridRadius);
         int r2 = std::min(gridRadius, -q + gridRadius);

        for (int r = r1; r <= r2; ++r) {
            // Convert axial to cartesian
            G4double x = dx * (q + r/2.0);
            G4double y = dy * r;

            // Save position for later PTFE hole subtraction
            pmtPositions.emplace_back(x, y, 0.);

            // --- Top PMT ---
            // Place top assembly (flipped)
            G4RotationMatrix* rot180 = new G4RotationMatrix();
            rot180->rotateX(180.*deg);

            new G4PVPlacement(rot180,
                            G4ThreeVector(x,y,casingZ),   // mirror placement
                            logicCasing, "CasingUp",
                            logicWorld, false, pmtIndex, true);

            new G4PVPlacement(rot180,
                            G4ThreeVector(x,y,cathodeZ),  // match the flipped cavity
                            logicPhotocathode, "PhotocathodeUp",
                            logicWorld, false, pmtIndex, true);

            physPMT_Top = new G4PVPlacement(rot180,
                G4ThreeVector(x, y, xenonHeight/2 + pmtThickness/2),
                logicPMT, "physPMT_Top", logicWorld, false, pmtIndex, true);

            // --- Bottom PMT ---
            // Place bottom assembly (upright)
            new G4PVPlacement(nullptr,                      // no rotation
                G4ThreeVector(x,y,-casingZ),   // position
                logicCasing, "CasingDown",     // logic and name
                logicWorld, false, pmtIndex+1000, true);

            new G4PVPlacement(nullptr,
                G4ThreeVector(x,y,-cathodeZ),  // position matches cavity
                logicPhotocathode, "PhotocathodeDown",
                logicWorld, false, pmtIndex+1000, true);

            physPMT_Bottom = new G4PVPlacement(nullptr,
                G4ThreeVector(x, y, -xenonHeight/2 - pmtThickness/2),
                logicPMT, "physPMT_Bottom", logicWorld, false, pmtIndex + 1000, true);

            ++pmtIndex;
        }
    }

    //  --- Make PTFE around the PMTs ---
    // This creates a thin 12-sided polygonal tile
    G4Polyhedra* baseTile = new G4Polyhedra("baseTile",
                                            startAngle,
                                            totalAngle,
                                            numSides,
                                            2,  // z-section count
                                            (G4double[]){ -ptfeTileThickness/2, ptfeTileThickness/2 },  // z positions
                                            (G4double[]){ tileInnerRadius, tileInnerRadius },           // inner radii
                                            (G4double[]){ tileOuterRadius, tileOuterRadius });          // outer radii

    // Start with the base tile
    G4VSolid* tileWithHoles = baseTile;

    // Create a PMT hole solid to subtract 
    G4double holeRadius = pmtRadius;
    G4Tubs* pmtHole = new G4Tubs("pmtHole", 0., holeRadius, ptfeTileThickness, 0., 360.*deg);

    for (const auto& pos : pmtPositions) {
        G4ThreeVector holePos = G4ThreeVector(pos.x(), pos.y(), 0.);  // holes in XY plane

        tileWithHoles = new G4SubtractionSolid("tileWithHoles", tileWithHoles, pmtHole,
                                            nullptr, holePos);
    }

    // Logical volume from final solid
    G4LogicalVolume* logicPTFETile = new G4LogicalVolume(tileWithHoles, PTFEMat, "logicPTFETile");
    new G4LogicalSkinSurface("PTFE_Skin", logicPTFETile, ptfeSurface);


    //logicPTFETile->SetVisAttributes(glassVis);

    // Top tile placement
    new G4PVPlacement(
        nullptr,
        G4ThreeVector(0., 0., xenonHeight/2 + ptfeTileThickness/2),
        logicPTFETile,
        "PTFE_Tile_Top",
        logicWorld,
        false,
        0,
        true
    );

    // Bottom tile placement
    new G4PVPlacement(
        nullptr,
        G4ThreeVector(0., 0., -xenonHeight/2 - ptfeTileThickness/2),
        logicPTFETile,
        "PTFE_Tile_Bottom",
        logicWorld,
        false,
        1,
        true
    );

    // --- Copper Blocks ---
    // Define copper disk solid
    G4Tubs* solidCopperDisk = new G4Tubs("solidCopperDisk", 0., copperDiskRadius, copperDiskThickness / 2, 0., 360. * deg);

    // Logical volume for copper disk
    G4LogicalVolume* logicCopperDisk = new G4LogicalVolume(solidCopperDisk, copperMat, "logicCopperDisk");

    //logicCopperDisk->SetVisAttributes(copperVis);


    // --- Top copper disk (above PMTs and PTFE tile) ---
    new G4PVPlacement(
        nullptr,
        G4ThreeVector(0., 0., xenonHeight/2 + pmtThickness + kovarHeight + copperDiskThickness / 2),
        logicCopperDisk,
        "CopperDisk_Top",
        logicWorld,
        false,
        0,
        true
    );

    // Bottom copper disk (below PMTs and PTFE tile)
    new G4PVPlacement(
        nullptr,
        G4ThreeVector(0., 0., -xenonHeight/2 - pmtThickness - kovarHeight - copperDiskThickness / 2),
        logicCopperDisk,
        "CopperDisk_Bottom",
        logicWorld,
        false,
        1,
        true
    );
    // The inner cut-out where detector goes - TODO make this line up with the PTFE
    G4double cavityRadius = innerCryoOuterRadius - 0.0056642 * m;       //
    G4double cavityHeight = xenonHeight + 2 * pmtThickness + 2.0 * kovarHeight + 2 * copperDiskThickness; // sits on top of copper disk


    // --- LXe between PTFE Wall and Inner Cryostat ---
    G4Tubs* solidLXeBlock = new G4Tubs("solidLXeBlock", 0., innerCryoOuterRadius - 0.0056642 * m, xenonHeight / 2, 0., 360.*deg);
    G4Polyhedra* cavityXenon = new G4Polyhedra("cavityXenon", 0.*deg, 360.*deg, numSides, 2, wallZPlanes, rInner, wallROuter);

    G4SubtractionSolid* solidOuterLXe = new G4SubtractionSolid("solidOuterLXe", solidLXeBlock, cavityXenon, nullptr, cavityPos);

    G4LogicalVolume* logicOuterLXe = new G4LogicalVolume(solidOuterLXe, lXeMat, "logicOuterLXe");

    new G4PVPlacement(nullptr, G4ThreeVector(0., 0., 0.), logicOuterLXe, "physOuterLXe", logicWorld, false, 0, true);

    // --- Inner Cryostat ---
    // Overall solid block size (inner cryostat)
    G4Tubs* solidCryoBlock1 = new G4Tubs("solidCryoBlock1", 0., innerCryoOuterRadius, innerCryoHeight / 2, 0., 360.*deg);

    // Inner cavity (cylinder to subtract)
    G4Tubs* solidCavity = new G4Tubs("solidCavity", 0., cavityRadius, cavityHeight / 2, 0., 360.*deg);

    // Subtract the cavity from the block
    // Make sure the cavity is centered inside the block (adjust if needed)
    G4SubtractionSolid* solidInnerCryo = new G4SubtractionSolid("solidInnerCryo", solidCryoBlock1, solidCavity, nullptr, cavityPos);

    // Create logical volume with steel material
    G4LogicalVolume* logicInnerCryo = new G4LogicalVolume(solidInnerCryo, cryoMat, "logicInnerCryo");
    //logicInnerCryo->SetVisAttributes(grayVis);

    // Place it into the world
    new G4PVPlacement(nullptr, G4ThreeVector(0., 0., 0.), logicInnerCryo, "physInnerCryo", logicWorld, false, 0, true);

    // --- Vacuum Between Cryostats ---

    // Define solid cylinder of vacuum
    G4Tubs* solidVacuumBlock = new G4Tubs("solidVacuumBlock", 0., vacuumRadius, vacuumHeight / 2, 0., 360.*deg);

    G4SubtractionSolid* solidVacuum = new G4SubtractionSolid("solidVacuum", solidVacuumBlock, solidCryoBlock1, nullptr, cavityPos);

    G4LogicalVolume* logicVacuum = new G4LogicalVolume(solidVacuum, worldMat, "logicVacuum");

    new G4PVPlacement(nullptr, G4ThreeVector(0., 0., 0.), logicVacuum, "physVacuum", logicWorld, false, 0, true);

    // --- Outer Cryostat ---
    // Define solid cylinder of vacuum
    G4Tubs* solidCryoBlock2 = new G4Tubs("solidCryoBlock2", 0., outerCryoRadius, outerCryoHeight / 2, 0., 360.*deg);

    G4SubtractionSolid* solidOuterCryo = new G4SubtractionSolid("solidOuterCryo", solidCryoBlock2, solidVacuumBlock, nullptr, cavityPos);

    G4LogicalVolume* logicOuterCryo= new G4LogicalVolume(solidOuterCryo, cryoMat, "logicOuterCryo");
    //logicOuterCryo->SetVisAttributes(grayVis);

    new G4PVPlacement(nullptr, G4ThreeVector(0., 0., 0.), logicOuterCryo, "physOuterCryo", logicWorld, false, 0, true);


    return physWorld;
}
